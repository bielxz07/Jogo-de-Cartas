<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Confronto Elemental - Edição Definitiva</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=MedievalSharp&display=swap" rel="stylesheet">
  <style>
    :root {
      --fire: #ff4d00;
      --water: #00a8ff;
      --earth: #b8860b;
      --lightning: #ffeb3b;
      --ice: #00d4ff;
      --light: #ffffff;
      --moon: #9c27b0;
      --wind: #4caf50;
      --spirit: #607d8b;
      --gold: #ffd700;
      --silver: #c0c0c0;
      --bronze: #cd7f32;
      --menu-bg: radial-gradient(circle at center, #0f0c29, #302b63, #24243e);
      --menu-border: linear-gradient(45deg, #ff00cc, #3333ff);
      --button-glow: 0 0 15px rgba(0, 234, 255, 0.7);
      --text-glow: 0 0 10px rgba(0, 234, 255, 0.8);
      --card-width: 180px;
      --card-height: 250px;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      margin: 0;
      font-family: 'Cinzel', serif;
      background: var(--menu-bg);
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      overflow-x: hidden;
      position: relative;
    }
    
    body::before {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url('https://images.unsplash.com/photo-1534796636912-3b95b3ab5986?q=80&w=1471&auto=format&fit=crop') center/cover no-repeat;
      opacity: 0.15;
      z-index: -1;
    }
    
    /* Efeitos de partículas */
    .particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: -1;
    }
    
    .particle {
      position: absolute;
      background: rgba(0, 234, 255, 0.5);
      border-radius: 50%;
      pointer-events: none;
    }
    
    /* Menu Principal */
    .main-menu {
      width: 100%;
      max-width: 1200px;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      position: relative;
      margin-top: 30px;
    }
    
    .menu-header {
      text-align: center;
      margin-bottom: 40px;
      position: relative;
      width: 100%;
    }
    
    .game-title {
      font-size: 5rem;
      font-weight: 700;
      color: var(--gold);
      text-shadow: 0 0 20px var(--gold), 0 0 40px var(--gold), 0 0 60px var(--gold);
      letter-spacing: 5px;
      margin-bottom: 10px;
      font-family: 'MedievalSharp', cursive;
      position: relative;
      z-index: 1;
      animation: titleGlow 3s infinite alternate;
    }
    
    @keyframes titleGlow {
      0% { text-shadow: 0 0 20px var(--gold), 0 0 40px var(--gold), 0 0 60px var(--gold); }
      100% { text-shadow: 0 0 25px var(--gold), 0 0 50px var(--gold), 0 0 75px var(--gold); }
    }
    
    .game-subtitle {
      font-size: 1.5rem;
      color: var(--silver);
      text-shadow: 0 0 10px var(--silver);
      letter-spacing: 2px;
      margin-bottom: 30px;
    }
    
    .menu-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 800px;
      background: rgba(0, 0, 0, 0.7);
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 0 30px rgba(0, 234, 255, 0.3);
      border: 2px solid;
      border-image: var(--menu-border);
      border-image-slice: 1;
      position: relative;
      overflow: hidden;
    }
    
    .menu-content::before {
      content: "";
      position: absolute;
      top: -10px;
      left: -10px;
      right: -10px;
      bottom: -10px;
      background: linear-gradient(45deg, 
        rgba(255, 0, 204, 0.1), 
        rgba(51, 51, 255, 0.1), 
        rgba(255, 0, 204, 0.1));
      z-index: -1;
      border-radius: 25px;
      animation: borderGlow 8s linear infinite;
    }
    
    @keyframes borderGlow {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    
    .menu-buttons {
      display: flex;
      flex-direction: column;
      gap: 25px;
      width: 100%;
      margin-bottom: 40px;
    }
    
    .menu-button {
      position: relative;
      background: linear-gradient(to right, #0f2027, #203a43, #2c5364);
      color: white;
      border: none;
      padding: 18px 30px;
      font-size: 1.5rem;
      border-radius: 50px;
      cursor: pointer;
      box-shadow: var(--button-glow);
      transition: all 0.3s ease;
      font-family: 'Cinzel', serif;
      letter-spacing: 1px;
      text-align: center;
      overflow: hidden;
      z-index: 1;
      width: 100%;
    }
    
    .menu-button::before {
      content: "";
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(0, 234, 255, 0.2), transparent);
      transition: 0.5s;
      z-index: -1;
    }
    
    .menu-button:hover {
      transform: translateY(-5px) scale(1.03);
      box-shadow: 0 0 25px rgba(0, 234, 255, 0.9);
    }
    
    .menu-button:hover::before {
      left: 100%;
    }
    
    .menu-button i {
      margin-right: 15px;
    }
    
    .difficulty-select {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin: 30px 0;
      flex-wrap: wrap;
    }
    
    .difficulty-button {
      position: relative;
      padding: 12px 25px;
      font-size: 1.2rem;
      background: rgba(0, 0, 0, 0.5);
      color: #fff;
      border: 2px solid #3498db;
      border-radius: 50px;
      cursor: pointer;
      transition: all 0.3s;
      font-family: 'Cinzel', serif;
      min-width: 120px;
      text-align: center;
      overflow: hidden;
    }
    
    .difficulty-button::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to right, rgba(0, 202, 255, 0.1), rgba(0, 234, 255, 0.3));
      transform: translateX(-100%);
      transition: all 0.3s;
      z-index: -1;
    }
    
    .difficulty-button:hover::before {
      transform: translateX(0);
    }
    
    .difficulty-button.active {
      background: linear-gradient(to right, #00c6ff, #0072ff);
      color: #00202e;
      border-color: #00eaff;
      box-shadow: var(--button-glow);
    }
    
    .menu-footer {
      margin-top: 30px;
      font-size: 0.9rem;
      color: #aaa;
      text-align: center;
    }
    
    /* Elementos decorativos */
    .element-orb {
      position: absolute;
      width: 100px;
      height: 100px;
      border-radius: 50%;
      filter: blur(30px);
      opacity: 0.7;
      z-index: -1;
      animation: floatOrb 15s infinite linear;
    }
    
    .orb-fire {
      background: var(--fire);
      top: 10%;
      left: 5%;
      animation-delay: 0s;
    }
    
    .orb-water {
      background: var(--water);
      bottom: 15%;
      right: 5%;
      animation-delay: 2s;
    }
    
    .orb-lightning {
      background: var(--lightning);
      top: 30%;
      right: 10%;
      animation-delay: 4s;
    }
    
    @keyframes floatOrb {
      0% { transform: translate(0, 0) rotate(0deg); }
      25% { transform: translate(50px, 50px) rotate(90deg); }
      50% { transform: translate(100px, 0) rotate(180deg); }
      75% { transform: translate(50px, -50px) rotate(270deg); }
      100% { transform: translate(0, 0) rotate(360deg); }
    }
    
    /* Efeito de fogo no título */
    .fire-effect {
      position: absolute;
      width: 100%;
      height: 100%;
      background: url('https://i.imgur.com/YKY28eT.png') center/cover no-repeat;
      mix-blend-mode: screen;
      opacity: 0.3;
      top: 0;
      left: 0;
      pointer-events: none;
      z-index: 0;
      animation: fireFlicker 3s infinite alternate;
    }
    
    @keyframes fireFlicker {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 0.5; }
    }
    
    /* Telas do jogo */
    .game-container {
      display: none;
      width: 100%;
      max-width: 1200px;
      padding: 20px;
      flex-direction: column;
      align-items: center;
    }
    
    .game-header {
      display: flex;
      justify-content: space-between;
      width: 100%;
      margin-bottom: 20px;
      background: rgba(0, 0, 0, 0.7);
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #00eaff;
      box-shadow: 0 0 15px rgba(0, 234, 255, 0.3);
    }
    
    .player-info {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 10px;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 150px;
    }
    
    .player-info.active {
      border: 2px solid #00eaff;
      box-shadow: 0 0 15px #00eaff;
    }
    
    .player-name {
      font-weight: bold;
      font-size: 1.2rem;
      margin-bottom: 5px;
    }
    
    .player-score {
      font-size: 1.5rem;
      color: #00ffcc;
    }
    
    .player-hand {
      font-size: 0.9rem;
      color: #aaa;
    }
    
    .game-area {
      display: flex;
      flex-direction: column;
      width: 100%;
      gap: 20px;
    }
    
    .battle-area {
      display: flex;
      justify-content: space-around;
      align-items: center;
      margin: 20px 0;
      flex-wrap: wrap;
      min-height: 300px;
    }
    
    .card {
      background: linear-gradient(to bottom, #141e30, #243b55);
      border: 2px solid #00d9ff;
      border-radius: 12px;
      padding: 12px;
      text-align: center;
      width: var(--card-width);
      min-height: var(--card-height);
      box-shadow: 0 0 10px rgba(0, 217, 255, 0.4);
      font-size: 1rem;
      position: relative;
      transition: transform 0.2s, box-shadow 0.3s;
      display: flex;
      flex-direction: column;
      cursor: pointer;
      margin: 10px;
    }
    
    .card.selected {
      transform: translateY(-20px);
      box-shadow: 0 0 20px #00ffff;
      border-color: #00ffff;
    }
    
    .card.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    /* Estilos elementais das cartas */
    .card.fire {
      border-color: var(--fire);
      box-shadow: 0 0 10px rgba(255, 77, 0, 0.6);
    }
    
    .card.water {
      border-color: var(--water);
      box-shadow: 0 0 10px rgba(0, 168, 255, 0.6);
    }
    
    .card.earth {
      border-color: var(--earth);
      box-shadow: 0 0 10px rgba(184, 134, 11, 0.6);
    }
    
    .card.lightning {
      border-color: var(--lightning);
      box-shadow: 0 0 10px rgba(255, 235, 59, 0.6);
    }
    
    .card.ice {
      border-color: var(--ice);
      box-shadow: 0 0 10px rgba(0, 212, 255, 0.6);
    }
    
    .card.light {
      border-color: var(--light);
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.6);
    }
    
    .card.moon {
      border-color: var(--moon);
      box-shadow: 0 0 10px rgba(156, 39, 176, 0.6);
    }
    
    .card.wind {
      border-color: var(--wind);
      box-shadow: 0 0 10px rgba(76, 175, 80, 0.6);
    }
    
    .card.spirit {
      border-color: var(--spirit);
      box-shadow: 0 0 10px rgba(96, 125, 139, 0.6);
    }
    
    .card.fire.selected {
      box-shadow: 0 0 20px var(--fire);
    }
    
    .card.water.selected {
      box-shadow: 0 0 20px var(--water);
    }
    
    .card.earth.selected {
      box-shadow: 0 0 20px var(--earth);
    }
    
    .card.lightning.selected {
      box-shadow: 0 0 20px var(--lightning);
    }
    
    .card.ice.selected {
      box-shadow: 0 0 20px var(--ice);
    }
    
    .card.light.selected {
      box-shadow: 0 0 20px var(--light);
    }
    
    .card.moon.selected {
      box-shadow: 0 0 20px var(--moon);
    }
    
    .card.wind.selected {
      box-shadow: 0 0 20px var(--wind);
    }
    
    .card.spirit.selected {
      box-shadow: 0 0 20px var(--spirit);
    }
    
    .card-image {
      width: 100%;
      height: 120px;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      margin-bottom: 10px;
      border-radius: 5px;
      background-color: rgba(0, 0, 0, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3rem;
    }
    
    .card-name {
      font-weight: bold;
      margin-bottom: 5px;
      font-size: 1.1rem;
    }
    
    .card-type {
      font-style: italic;
      font-size: 0.8rem;
      color: #aaa;
      margin-bottom: 5px;
    }
    
    .card-element {
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .card-power {
      font-size: 1.2rem;
      margin: 5px 0;
      color: #ffcc00;
    }
    
    .card-ability {
      font-size: 0.8rem;
      margin-top: 10px;
      color: #00ffcc;
      flex-grow: 1;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .hand {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 15px;
      margin-top: 20px;
    }
    
    .battle-result {
      margin: 20px 0;
      font-size: 1.5rem;
      color: #00ffcc;
      text-align: center;
      min-height: 40px;
    }
    
    .game-log {
      width: 100%;
      max-height: 200px;
      overflow-y: auto;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      padding: 10px;
      margin-top: 20px;
      font-size: 0.9rem;
      border: 1px solid #00eaff;
    }
    
    .log-entry {
      margin-bottom: 5px;
      padding-bottom: 5px;
      border-bottom: 1px solid #333;
    }
    
    .log-entry:last-child {
      border-bottom: none;
    }
    
    .game-controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 20px;
      flex-wrap: wrap;
    }
    
    .game-controls button {
      padding: 10px 20px;
      font-size: 1rem;
      border-radius: 8px;
      cursor: pointer;
      border: none;
      transition: all 0.3s;
      font-family: 'Cinzel', serif;
    }
    
    .end-turn-btn {
      background: linear-gradient(to right, #00c6ff, #0072ff);
      color: white;
    }
    
    .end-turn-btn:hover {
      background: linear-gradient(to right, #00b4e6, #0060d9);
    }
    
    .back-btn {
      background: linear-gradient(to right, #ff416c, #ff4b2b);
      color: white;
    }
    
    .back-btn:hover {
      background: linear-gradient(to right, #e63a5f, #e64526);
    }
    
    /* Tela Sobre */
    .about-screen {
      display: none;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 800px;
      background: rgba(0, 0, 0, 0.7);
      border-radius: 20px;
      padding: 30px;
      margin-top: 20px;
      border: 1px solid #00eaff;
      box-shadow: 0 0 20px rgba(0, 234, 255, 0.3);
    }
    
    .about-content {
      width: 100%;
      text-align: center;
    }
    
    .about-content h2 {
      color: #00eaff;
      margin-bottom: 20px;
      font-size: 2rem;
    }
    
    .about-content p {
      margin-bottom: 15px;
      line-height: 1.6;
    }
    
    .element-chart {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 10px;
      margin: 20px 0;
    }
    
    .element-item {
      padding: 10px;
      border-radius: 8px;
      font-weight: bold;
      background: rgba(0, 0, 0, 0.3);
      border: 1px solid;
    }
    
    /* Construtor de Deck */
    .deck-builder {
      display: none;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 1200px;
      background: rgba(0, 0, 0, 0.7);
      border-radius: 20px;
      padding: 20px;
      margin-top: 20px;
      border: 1px solid #00eaff;
      box-shadow: 0 0 20px rgba(0, 234, 255, 0.3);
    }
    
    .deck-builder h2 {
      color: #00eaff;
      margin-bottom: 20px;
      font-size: 2rem;
    }
    
    .deck-builder-container {
      display: flex;
      width: 100%;
      gap: 20px;
      flex-wrap: wrap;
    }
    
    .available-cards, .player-deck {
      flex: 1;
      min-width: 300px;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      padding: 15px;
      border: 1px solid #00eaff;
    }
    
    .deck-title {
      text-align: center;
      margin-bottom: 15px;
      font-size: 1.2rem;
      color: #00eaff;
    }
    
    .deck-count {
      text-align: center;
      margin-bottom: 10px;
      font-size: 0.9rem;
    }
    
    .deck-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      max-height: 500px;
      overflow-y: auto;
      padding: 5px;
    }
    
    .deck-builder-controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 20px;
      width: 100%;
    }
    
    /* Tela de Regras */
    .rules-screen {
      display: none;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 800px;
      background: rgba(0, 0, 0, 0.7);
      border-radius: 20px;
      padding: 30px;
      margin-top: 20px;
      border: 1px solid #00eaff;
      box-shadow: 0 0 20px rgba(0, 234, 255, 0.3);
    }
    
    .rules-content {
      width: 100%;
    }
    
    .rules-content h2 {
      color: #00eaff;
      margin-bottom: 20px;
      text-align: center;
      font-size: 2rem;
    }
    
    .rules-content h3 {
      color: #00ffcc;
      margin: 15px 0 10px;
    }
    
    .rules-content p, .rules-content ul {
      margin-bottom: 10px;
      line-height: 1.6;
    }
    
    .rules-content ul {
      padding-left: 20px;
    }
    
    /* Tela de Game Over */
    .game-over-screen {
      display: none;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 800px;
      background: rgba(0, 0, 0, 0.7);
      border-radius: 20px;
      padding: 40px;
      margin-top: 20px;
      border: 1px solid #00eaff;
      box-shadow: 0 0 30px rgba(0, 234, 255, 0.5);
    }
    
    .game-over-message {
      font-size: 2.5rem;
      color: #00ffcc;
      margin-bottom: 20px;
      text-align: center;
      text-shadow: 0 0 10px #00ffcc;
    }
    
    .winner-name {
      font-size: 3rem;
      color: var(--gold);
      text-shadow: 0 0 15px var(--gold);
      margin: 20px 0;
      text-align: center;
    }
    
    .player-stats {
      display: flex;
      justify-content: space-around;
      width: 100%;
      margin: 30px 0;
      flex-wrap: wrap;
      gap: 20px;
    }
    
    .stat-item {
      text-align: center;
      padding: 15px;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      min-width: 150px;
      border: 1px solid #00eaff;
    }
    
    .stat-value {
      font-size: 2rem;
      color: #00ffcc;
      margin-bottom: 5px;
    }
    
    .stat-label {
      font-size: 1rem;
      color: #aaa;
    }
    
    /* Responsividade */
    @media (max-width: 992px) {
      .game-title {
        font-size: 4rem;
      }
      
      .menu-content {
        padding: 30px;
      }
      
      .menu-button {
        font-size: 1.3rem;
        padding: 15px 25px;
      }
      
      :root {
        --card-width: 160px;
        --card-height: 230px;
      }
    }
    
    @media (max-width: 768px) {
      .game-title {
        font-size: 3rem;
      }
      
      .game-subtitle {
        font-size: 1.2rem;
      }
      
      .menu-content {
        padding: 20px;
      }
      
      .menu-button {
        font-size: 1.1rem;
        padding: 12px 20px;
      }
      
      .difficulty-button {
        font-size: 1rem;
        padding: 10px 15px;
        min-width: 100px;
      }
      
      .game-header {
        flex-wrap: wrap;
        gap: 10px;
      }
      
      .player-info {
        min-width: 120px;
      }
      
      :root {
        --card-width: 140px;
        --card-height: 210px;
      }
    }
    
    @media (max-width: 576px) {
      .game-title {
        font-size: 2.5rem;
      }
      
      .menu-buttons {
        gap: 15px;
      }
      
      .difficulty-select {
        flex-direction: column;
        align-items: center;
        gap: 10px;
      }
      
      .difficulty-button {
        width: 80%;
      }
      
      .deck-builder-container {
        flex-direction: column;
      }
      
      :root {
        --card-width: 120px;
        --card-height: 190px;
      }
    }
  </style>
</head>
<body>
  <!-- Efeito de partículas -->
  <div class="particles" id="particles"></div>
  
  <!-- Orbs elementais decorativas -->
  <div class="element-orb orb-fire"></div>
  <div class="element-orb orb-water"></div>
  <div class="element-orb orb-lightning"></div>
  
  <!-- Menu Principal -->
  <div class="main-menu" id="mainMenu">
    <div class="menu-header">
      <h1 class="game-title">CONFRONTO ELEMENTAL</h1>
      <div class="fire-effect"></div>
      <p class="game-subtitle">Domine os elementos e torne-se o maior duelista mágico!</p>
    </div>
    
    <div class="menu-content">
      <div class="menu-buttons">
        <button class="menu-button" onclick="showScreen('gameScreen')">
          <i class="fas fa-play"></i> Iniciar Batalha
        </button>
        <button class="menu-button" onclick="showScreen('deckBuilder')">
          <i class="fas fa-layer-group"></i> Construtor de Deck
        </button>
        <button class="menu-button" onclick="showScreen('rulesScreen')">
          <i class="fas fa-book"></i> Grimório de Regras
        </button>
        <button class="menu-button" onclick="showScreen('aboutScreen')">
          <i class="fas fa-scroll"></i> Crônicas do Jogo
        </button>
      </div>
      
      <div class="difficulty-select">
        <button class="difficulty-button active" onclick="setDifficulty('easy')" id="easy">
          <i class="fas fa-feather-alt"></i> Aprendiz
        </button>
        <button class="difficulty-button" onclick="setDifficulty('medium')" id="medium">
          <i class="fas fa-shield-alt"></i> Mestre
        </button>
        <button class="difficulty-button" onclick="setDifficulty('hard')" id="hard">
          <i class="fas fa-crown"></i> Arquimago
        </button>
      </div>
      
      <div class="menu-footer">
        <p>Desafie os elementos e prove seu valor no torneio mágico!</p>
        <p>© 2023 Confronto Elemental - Todos os poderes reservados</p>
      </div>
    </div>
  </div>

  <!-- Tela de Jogo -->
  <div class="game-container" id="gameScreen">
    <div class="game-header">
      <div class="player-info" id="player1Info">
        <div class="player-name">Jogador</div>
        <div class="player-score">0</div>
        <div class="player-hand">Cartas: 5</div>
      </div>
      
      <div class="player-info" id="player2Info">
        <div class="player-name">CPU 1</div>
        <div class="player-score">0</div>
        <div class="player-hand">Cartas: 5</div>
      </div>
      
      <div class="player-info" id="player3Info">
        <div class="player-name">CPU 2</div>
        <div class="player-score">0</div>
        <div class="player-hand">Cartas: 5</div>
      </div>
      
      <div class="player-info" id="player4Info">
        <div class="player-name">CPU 3</div>
        <div class="player-score">0</div>
        <div class="player-hand">Cartas: 5</div>
      </div>
    </div>
    
    <div class="game-area">
      <div class="battle-area" id="battleArea">
        <!-- Cartas de batalha serão inseridas aqui -->
      </div>
      
      <div class="battle-result" id="battleResult"></div>
      
      <div class="hand" id="playerHand">
        <!-- Cartas da mão do jogador serão inseridas aqui -->
      </div>
      
      <div class="game-log" id="gameLog">
        <!-- Registro do jogo será inserido aqui -->
      </div>
      
      <div class="game-controls">
        <button class="end-turn-btn" onclick="endTurn()">
          <i class="fas fa-hourglass-end"></i> Finalizar Turno
        </button>
        <button class="back-btn" onclick="backToMenu()">
          <i class="fas fa-door-open"></i> Voltar ao Menu
        </button>
      </div>
    </div>
  </div>
  
  <!-- Tela Sobre -->
  <div class="about-screen" id="aboutScreen">
    <div class="about-content">
      <h2>Sobre o Jogo</h2>
      <p>Confronto Elemental é um jogo de estratégia onde cada jogador usa cartas com poderes elementais únicos. Derrote seus oponentes somando 10 pontos antes deles!</p>
      <p>Desafie a inteligência artificial em diferentes níveis de dificuldade e aprenda a usar as habilidades e fraquezas elementais ao seu favor.</p>
      <p>Domine os elementos, utilize estratégias inteligentes e torne-se o maior duelista elemental!</p>
      
      <h3>Elementos e Vantagens</h3>
      <div class="element-chart">
        <div class="element-item" style="border-color: var(--fire);">Fogo > Gelo, Terra</div>
        <div class="element-item" style="border-color: var(--water);">Água > Fogo, Raio</div>
        <div class="element-item" style="border-color: var(--earth);">Terra > Raio, Vento</div>
        <div class="element-item" style="border-color: var(--lightning);">Raio > Água, Luz</div>
        <div class="element-item" style="border-color: var(--ice);">Gelo > Vento, Terra</div>
        <div class="element-item" style="border-color: var(--light);">Luz > Espírito, Lua</div>
        <div class="element-item" style="border-color: var(--moon);">Lua > Gelo, Fogo</div>
        <div class="element-item" style="border-color: var(--wind);">Vento > Luz, Lua</div>
        <div class="element-item" style="border-color: var(--spirit);">Espírito > Água, Vento</div>
      </div>
    </div>
    
    <button class="back-btn" onclick="backToMenu()" style="margin-top:20px">
      <i class="fas fa-arrow-left"></i> Voltar
    </button>
  </div>
  
  <!-- Construtor de Deck -->
  <div class="deck-builder" id="deckBuilder">
    <h2>Construtor de Deck</h2>
    <p>Construa seu deck personalizado com até 18 cartas para usar no jogo.</p>
    
    <div class="deck-builder-container">
      <div class="available-cards">
        <div class="deck-title">Cartas Disponíveis</div>
        <div class="deck-count"><span id="availableCount">36</span> cartas</div>
        <div class="deck-cards" id="availableCards">
          <!-- Cartas disponíveis serão inseridas aqui -->
        </div>
      </div>
      
      <div class="player-deck">
        <div class="deck-title">Seu Deck</div>
        <div class="deck-count"><span id="deckCount">0</span>/18 cartas</div>
        <div class="deck-cards" id="playerDeck">
          <!-- Cartas do deck serão inseridas aqui -->
        </div>
      </div>
    </div>
    
    <div class="deck-builder-controls">
      <button class="end-turn-btn" onclick="saveDeck()">
        <i class="fas fa-save"></i> Salvar Deck
      </button>
      <button class="back-btn" onclick="backToMenu()">
        <i class="fas fa-arrow-left"></i> Voltar
      </button>
    </div>
  </div>
  
  <!-- Tela de Regras -->
  <div class="rules-screen" id="rulesScreen">
    <div class="rules-content">
      <h2>Regras do Jogo</h2>
      
      <h3>Objetivo</h3>
      <p>Ser o primeiro jogador a conquistar 10 pontos vencendo duelos mágicos entre cartas com elementos, forças e habilidades distintas.</p>
      
      <h3>Preparação</h3>
      <p>1. Cada jogador começa com 5 cartas na mão.</p>
      <p>2. O restante das cartas forma o monte de compra.</p>
      <p>3. Determine aleatoriamente quem começa.</p>
      
      <h3>Turnos</h3>
      <p>1. Cada jogador seleciona secretamente 1 carta da mão.</p>
      <p>2. As cartas são reveladas simultaneamente.</p>
      <p>3. Compare as forças das cartas:</p>
      <ul>
        <li>A maior força vence, a carta perdedora vai para o descarte</li>
        <li>Em caso de empate, ambas são descartadas</li>
      </ul>
      <p>4. Aplique qualquer habilidade especial das cartas reveladas.</p>
      <p>5. O vencedor da rodada ganha 1 ponto.</p>
      <p>6. Todos os jogadores compram uma nova carta (se houver no monte).</p>
      <p>7. Repita até que um jogador atinja 10 pontos.</p>
      
      <h3>Vantagens Elementais</h3>
      <p>Cada elemento possui vantagem sobre outro, dando +1 de força ao enfrentar o elemento fraco:</p>
      <ul>
        <li>Fogo > Gelo, Terra</li>
        <li>Água > Fogo, Raio</li>
        <li>Terra > Raio, Vento</li>
        <li>Raio > Água, Luz</li>
        <li>Gelo > Vento, Terra</li>
        <li>Luz > Espírito, Lua</li>
        <li>Lua > Gelo, Fogo</li>
        <li>Vento > Luz, Lua</li>
        <li>Espírito > Água, Vento</li>
      </ul>
      
      <h3>Fim de Jogo</h3>
      <p>O jogo termina quando um jogador alcança 10 pontos. Em caso de empate ou fim do monte sem vencedor, ganha quem tiver mais pontos.</p>
    </div>
    
    <button class="back-btn" onclick="backToMenu()" style="margin-top:20px">
      <i class="fas fa-arrow-left"></i> Voltar
    </button>
  </div>
  
  <!-- Tela de Game Over -->
  <div class="game-over-screen" id="gameOverScreen">
    <div class="game-over-message">Fim de Jogo!</div>
    <div class="winner-name" id="winnerName"></div>
    
    <div class="player-stats">
      <div class="stat-item">
        <div class="stat-value" id="playerFinalScore">0</div>
        <div class="stat-label">Seus Pontos</div>
      </div>
      <div class="stat-item">
        <div class="stat-value" id="roundsPlayed">0</div>
        <div class="stat-label">Rodadas</div>
      </div>
      <div class="stat-item">
        <div class="stat-value" id="cardsPlayed">0</div>
        <div class="stat-label">Cartas Jogadas</div>
      </div>
    </div>
    
    <button class="end-turn-btn" onclick="startGame()" style="margin-top:20px">
      <i class="fas fa-redo"></i> Jogar Novamente
    </button>
    <button class="back-btn" onclick="backToMenu()" style="margin-top:10px">
      <i class="fas fa-door-open"></i> Voltar ao Menu
    </button>
  </div>

  <audio id="cardSound" src="https://cdn.pixabay.com/download/audio/2022/03/26/audio_3f956eaf98.mp3?filename=game-card-flip-199295.mp3"></audio>
  <audio id="winSound" src="https://cdn.pixabay.com/download/audio/2021/08/09/audio_1a9d2a9a0f.mp3?filename=success-1-6297.mp3"></audio>
  <audio id="loseSound" src="https://cdn.pixabay.com/download/audio/2022/03/19/audio_0a4d6e7a3e.mp3?filename=negative_beeps-6008.mp3"></audio>
  <audio id="menuMusic" loop>
    <source src="https://cdn.pixabay.com/download/audio/2023/04/06/audio_6d8a1a8e3a.mp3?filename=epic-cinematic-trailer-115571.mp3" type="audio/mpeg">
  </audio>

  <script>
    // Configurações do jogo
    const gameConfig = {
      difficulty: 'easy',
      playerDeck: [],
      maxPoints: 10,
      maxPlayers: 4,
      currentPlayer: 0,
      selectedCard: null,
      gameState: 'waiting', // waiting, playing, battle, ended
      players: [],
      deck: [],
      discardPile: [],
      battleResults: [],
      gameLog: [],
      round: 0,
      cardsPlayed: 0,
      musicEnabled: true
    };
    
    // Todas as cartas do jogo
    const allCards = [
      { id: 1, name: "Guardião do Rio", type: "Guardião", element: "water", power: 2, ability: "Copia o efeito da última carta jogada.", icon: "💧" },
      { id: 2, name: "Feiticeiro das Chamas", type: "Feiticeiro", element: "fire", power: 3, ability: "Ganha +2 se o oponente for Terra.", icon: "🔥" },
      { id: 3, name: "Maga da Geada", type: "Maga", element: "ice", power: 5, ability: "Congela a próxima carta do oponente.", icon: "❄️" },
      { id: 4, name: "Conjurador do Trovão", type: "Conjurador", element: "lightning", power: 4, ability: "Causa 1 de dano direto mesmo se perder.", icon: "⚡" },
      { id: 5, name: "Guardião da Floresta", type: "Guardião", element: "earth", power: 6, ability: "Recupera uma carta descartada.", icon: "🌿" },
      { id: 6, name: "Mago da Luz Serena", type: "Mago", element: "light", power: 3, ability: "Anula a habilidade do oponente.", icon: "☀️" },
      { id: 7, name: "Oráculo da Lua Crescente", type: "Oráculo", element: "moon", power: 4, ability: "Revela a próxima carta do oponente.", icon: "🌙" },
      { id: 8, name: "Maga dos Ventos Leves", type: "Maga", element: "wind", power: 2, ability: "Troca de carta com o oponente.", icon: "🌪️" },
      { id: 9, name: "Conjurador Espiritual", type: "Conjurador", element: "spirit", power: 5, ability: "Revive uma carta descartada aleatória.", icon: "👻" },
      { id: 10, name: "Aprendiz do Vulcão", type: "Aprendiz", element: "fire", power: 2, ability: "Ganha +1 se perder o duelo.", icon: "🌋" },
      { id: 11, name: "Discípula da Maré", type: "Discípula", element: "water", power: 3, ability: "Oponente descarta uma carta aleatória.", icon: "🌊" },
      { id: 12, name: "Sentinela Rochoso", type: "Sentinela", element: "earth", power: 4, ability: "Ignora penalidade de elemento.", icon: "🪨" },
      { id: 13, name: "Guardião das Estrelas", type: "Guardião", element: "light", power: 5, ability: "Concede +1 de força a outra carta.", icon: "⭐" },
      { id: 14, name: "Sábio do Vento Norte", type: "Sábio", element: "wind", power: 6, ability: "Imune a efeitos de gelo.", icon: "🍃" },
      { id: 15, name: "Mística do Eclipse", type: "Mística", element: "moon", power: 3, ability: "Em empates, ganha o ponto.", icon: "🌑" },
      { id: 16, name: "Conjurador do Relâmpago", type: "Conjurador", element: "lightning", power: 7, ability: "Se vencer, oponente perde 2 cartas.", icon: "🌩️" },
      { id: 17, name: "Guardião da Névoa", type: "Guardião", element: "ice", power: 4, ability: "Reduz em -1 a força do oponente.", icon: "🌫️" },
      { id: 18, name: "Guardião do Espírito Antigo", type: "Guardião", element: "spirit", power: 6, ability: "Não pode ser descartado.", icon: "🧿" },
      { id: 19, name: "Feiticeira Ardente", type: "Feiticeira", element: "fire", power: 4, ability: "Queima a habilidade do oponente.", icon: "🧙‍♀️" },
      { id: 20, name: "Guardião do Lago Sereno", type: "Guardião", element: "water", power: 5, ability: "Em derrota, volta à mão.", icon: "🏞️" },
      { id: 21, name: "Maga dos Cristais", type: "Maga", element: "ice", power: 3, ability: "Dobra força se oponente for Vento.", icon: "🔮" },
      { id: 22, name: "Místico do Templo Solar", type: "Místico", element: "light", power: 7, ability: "Aumenta força de cartas Luz em 1.", icon: "🕌" },
      { id: 23, name: "Druida das Pedras", type: "Druida", element: "earth", power: 3, ability: "Ganha +2 se monte ≤ 10 cartas.", icon: "🌳" },
      { id: 24, name: "Feiticeiro da Tempestade", type: "Feiticeiro", element: "lightning", power: 5, ability: "Em empates, ambos perdem 1 ponto.", icon: "🌧️" },
      { id: 25, name: "Oráculo Lunar", type: "Oráculo", element: "moon", power: 4, ability: "Permite olhar 2 cartas do topo.", icon: "🔮" },
      { id: 26, name: "Guardião Celeste", type: "Guardião", element: "wind", power: 3, ability: "Impede uso de habilidades.", icon: "🌌" },
      { id: 27, name: "Evocador das Sombras", type: "Evocador", element: "spirit", power: 4, ability: "Copia a força do oponente.", icon: "🕶️" },
      { id: 28, name: "Mago das Cinzas", type: "Mago", element: "fire", power: 6, ability: "Se derrotado, causa 2 de dano.", icon: "🧙‍♂️" },
      { id: 29, name: "Guardião Submerso", type: "Guardião", element: "water", power: 6, ability: "Remove habilidade de Raio.", icon: "🧜‍♂️" },
      { id: 30, name: "Conjurador das Montanhas", type: "Conjurador", element: "earth", power: 7, ability: "Não é afetado por vantagens.", icon: "⛰️" },
      { id: 31, name: "Guardião da Aurora", type: "Guardião", element: "light", power: 4, ability: "Impende empate.", icon: "🌄" },
      { id: 32, name: "Maga do Véu Lunar", type: "Maga", element: "moon", power: 5, ability: "Transforma em cópia da carta oponente.", icon: "👰‍♀️" },
      { id: 33, name: "Maga dos Vendavais", type: "Maga", element: "wind", power: 6, ability: "Oponente embaralha e descarta 1.", icon: "🌬️" },
      { id: 34, name: "Sábio Espiritual", type: "Sábio", element: "spirit", power: 3, ability: "Impede reviver cartas.", icon: "🧙" },
      { id: 35, name: "Feiticeiro Carmesim", type: "Feiticeiro", element: "fire", power: 5, ability: "+1 por cada carta Fogo descartada.", icon: "🔴" },
      { id: 36, name: "Místico Abissal", type: "Místico", element: "water", power: 7, ability: "Se vencer, compra 2 cartas extras.", icon: "🌀" }
    ];
    
    // Vantagens elementais
    const elementAdvantages = {
      fire: ['ice', 'earth'],
      water: ['fire', 'lightning'],
      earth: ['lightning', 'wind'],
      lightning: ['water', 'light'],
      ice: ['wind', 'earth'],
      light: ['spirit', 'moon'],
      moon: ['ice', 'fire'],
      wind: ['light', 'moon'],
      spirit: ['water', 'wind']
    };
    
    // Element colors
    const elementColors = {
      fire: '#ff4d00',
      water: '#00a8ff',
      earth: '#b8860b',
      lightning: '#ffeb3b',
      ice: '#00d4ff',
      light: '#ffffff',
      moon: '#9c27b0',
      wind: '#4caf50',
      spirit: '#607d8b'
    };
    
    // Element names in Portuguese
    const elementNames = {
      fire: 'Fogo',
      water: 'Água',
      earth: 'Terra',
      lightning: 'Raio',
      ice: 'Gelo',
      light: 'Luz',
      moon: 'Lua',
      wind: 'Vento',
      spirit: 'Espírito'
    };
    
    // Type names in Portuguese
    const typeNames = {
      'Guardião': 'Guardião',
      'Feiticeiro': 'Feiticeiro',
      'Maga': 'Maga',
      'Conjurador': 'Conjurador',
      'Mago': 'Mago',
      'Oráculo': 'Oráculo',
      'Aprendiz': 'Aprendiz',
      'Discípula': 'Discípula',
      'Sentinela': 'Sentinela',
      'Sábio': 'Sábio',
      'Mística': 'Mística',
      'Druida': 'Druida',
      'Evocador': 'Evocador',
      'Místico': 'Místico'
    };
    
    // Inicialização do jogo
    function initGame() {
      // Carrega o deck salvo do localStorage
      const savedDeck = localStorage.getItem('elementalClashDeck');
      if (savedDeck) {
        gameConfig.playerDeck = JSON.parse(savedDeck);
      } else {
        // Se não houver deck salvo, usa todas as cartas
        gameConfig.playerDeck = [...allCards];
      }
      
      // Inicializa os players
      gameConfig.players = [
        { id: 0, name: "Jogador", score: 0, hand: [], isHuman: true, active: true },
        { id: 1, name: "CPU 1", score: 0, hand: [], isHuman: false, active: true },
        { id: 2, name: "CPU 2", score: 0, hand: [], isHuman: false, active: true },
        { id: 3, name: "CPU 3", score: 0, hand: [], isHuman: false, active: true }
      ];
      
      // Inicia a música de fundo
      toggleMusic();
      
      // Embaralha e distribui as cartas
      resetGame();
    }
    
    // Alterna a música de fundo
    function toggleMusic() {
      const music = document.getElementById('menuMusic');
      if (gameConfig.musicEnabled) {
        music.play().catch(e => console.log("Autoplay bloqueado: ", e));
      } else {
        music.pause();
      }
    }
    
    // Mostra uma tela específica
    function showScreen(screenId) {
      document.getElementById('mainMenu').style.display = 'none';
      document.getElementById('gameScreen').style.display = 'none';
      document.getElementById('aboutScreen').style.display = 'none';
      document.getElementById('deckBuilder').style.display = 'none';
      document.getElementById('rulesScreen').style.display = 'none';
      document.getElementById('gameOverScreen').style.display = 'none';
      
      if (screenId === 'gameScreen') {
        startGame();
      } else if (screenId === 'deckBuilder') {
        initDeckBuilder();
        document.getElementById('deckBuilder').style.display = 'flex';
      } else {
        document.getElementById(screenId).style.display = 'flex';
      }
    }
    
    // Volta para o menu
    function backToMenu() {
      document.getElementById('mainMenu').style.display = 'flex';
      document.getElementById('gameScreen').style.display = 'none';
      document.getElementById('aboutScreen').style.display = 'none';
      document.getElementById('deckBuilder').style.display = 'none';
      document.getElementById('rulesScreen').style.display = 'none';
      document.getElementById('gameOverScreen').style.display = 'none';
      
      // Reinicia a música se estiver habilitada
      if (gameConfig.musicEnabled) {
        const music = document.getElementById('menuMusic');
        music.currentTime = 0;
        music.play().catch(e => console.log("Autoplay bloqueado: ", e));
      }
    }
    
    // Define a dificuldade
    function setDifficulty(level) {
      gameConfig.difficulty = level;
      document.querySelectorAll('.difficulty-select button').forEach(btn => btn.classList.remove('active'));
      document.getElementById(level).classList.add('active');
      
      // Efeito sonoro
      document.getElementById('cardSound').play();
    }
    
    // Inicia o jogo
    function startGame() {
      resetGame();
      gameConfig.gameState = 'waiting';
      document.getElementById('gameScreen').style.display = 'flex';
      renderPlayerHand();
      updatePlayerInfo();
      
      // Pausa a música do menu
      document.getElementById('menuMusic').pause();
    }
    
    // Reinicia o jogo
    function resetGame() {
      // Cria um novo deck misturando todas as cartas
      gameConfig.deck = shuffleDeck([...allCards]);
      gameConfig.discardPile = [];
      gameConfig.battleResults = [];
      gameConfig.gameLog = [];
      gameConfig.round = 0;
      gameConfig.cardsPlayed = 0;
      
      // Reseta os players
      gameConfig.players.forEach(player => {
        player.score = 0;
        player.hand = [];
        player.active = true;
        
        // Distribui 5 cartas para cada jogador
        for (let i = 0; i < 5; i++) {
          if (gameConfig.deck.length > 0) {
            const card = gameConfig.deck.pop();
            player.hand.push(card);
          }
        }
      });
      
      updatePlayerInfo();
      updateGameLog("Novo jogo iniciado! Prepare-se para a batalha elemental!");
      
      // Limpa a área de batalha
      document.getElementById('battleArea').innerHTML = '';
      document.getElementById('battleResult').textContent = '';
    }
    
    // Embaralha o deck
    function shuffleDeck(deck) {
      for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
      }
      return deck;
    }
    
    // Atualiza as informações dos jogadores
    function updatePlayerInfo() {
      gameConfig.players.forEach((player, index) => {
        const playerInfo = document.getElementById(`player${index+1}Info`);
        if (playerInfo) {
          playerInfo.querySelector('.player-score').textContent = player.score;
          playerInfo.querySelector('.player-hand').textContent = `Cartas: ${player.hand.length}`;
          
          if (player.active) {
            playerInfo.classList.add('active');
          } else {
            playerInfo.classList.remove('active');
          }
        }
      });
    }
    
    // Renderiza a mão do jogador
    function renderPlayerHand() {
      const playerHand = document.getElementById('playerHand');
      playerHand.innerHTML = '';
      
      const player = gameConfig.players[0];
      
      if (player.hand.length === 0) {
        playerHand.innerHTML = '<div class="no-cards">Você não tem cartas na mão</div>';
        return;
      }
      
      player.hand.forEach((card, index) => {
        const cardElement = createCardElement(card, index, true);
        playerHand.appendChild(cardElement);
      });
    }
    
    // Cria um elemento de carta
    function createCardElement(card, index, selectable = false) {
      const cardElement = document.createElement('div');
      cardElement.className = `card ${card.element}`;
      cardElement.dataset.index = index;
      
      const cardImage = document.createElement('div');
      cardImage.className = 'card-image';
      cardImage.textContent = card.icon;
      
      const cardName = document.createElement('div');
      cardName.className = 'card-name';
      cardName.textContent = card.name;
      
      const cardType = document.createElement('div');
      cardType.className = 'card-type';
      cardType.textContent = typeNames[card.type];
      
      const cardElementText = document.createElement('div');
      cardElementText.className = 'card-element';
      cardElementText.textContent = elementNames[card.element];
      cardElementText.style.color = elementColors[card.element];
      
      const cardPower = document.createElement('div');
      cardPower.className = 'card-power';
      cardPower.textContent = `Força: ${card.power}`;
      
      const cardAbility = document.createElement('div');
      cardAbility.className = 'card-ability';
      cardAbility.textContent = card.ability;
      
      cardElement.appendChild(cardImage);
      cardElement.appendChild(cardName);
      cardElement.appendChild(cardType);
      cardElement.appendChild(cardElementText);
      cardElement.appendChild(cardPower);
      cardElement.appendChild(cardAbility);
      
      if (selectable) {
        cardElement.addEventListener('click', () => selectCard(index));
      }
      
      return cardElement;
    }
    
    // Seleciona uma carta para jogar
    function selectCard(index) {
      if (gameConfig.gameState !== 'waiting') return;
      
      const playerHand = document.getElementById('playerHand');
      const cards = playerHand.querySelectorAll('.card');
      
      // Desseleciona todas as cartas
      cards.forEach(card => card.classList.remove('selected'));
      
      // Seleciona a carta clicada
      cards[index].classList.add('selected');
      gameConfig.selectedCard = index;
      
      // Efeito sonoro
      document.getElementById('cardSound').play();
    }
    
    // Finaliza o turno
    function endTurn() {
      if (gameConfig.gameState !== 'waiting' || gameConfig.selectedCard === null) {
        alert("Selecione uma carta para jogar!");
        return;
      }
      
      gameConfig.gameState = 'playing';
      playRound();
    }
    
    // Joga uma rodada
    function playRound() {
      gameConfig.round++;
      updateGameLog(`🏁 Rodada ${gameConfig.round} começando!`);
      
      // Jogador humano joga sua carta selecionada
      const humanPlayer = gameConfig.players[0];
      const humanCard = humanPlayer.hand[gameConfig.selectedCard];
      humanPlayer.hand.splice(gameConfig.selectedCard, 1);
      gameConfig.selectedCard = null;
      
      // CPUs escolhem cartas aleatórias
      const cpuCards = [];
      for (let i = 1; i < gameConfig.maxPlayers; i++) {
        if (gameConfig.players[i].active && gameConfig.players[i].hand.length > 0) {
          const randomIndex = Math.floor(Math.random() * gameConfig.players[i].hand.length);
          cpuCards.push({
            playerId: i,
            card: gameConfig.players[i].hand[randomIndex],
            cardIndex: randomIndex
          });
          gameConfig.players[i].hand.splice(randomIndex, 1);
        }
      }
      
      // Mostra as cartas jogadas
      showBattleCards(humanCard, cpuCards);
      
      // Processa os resultados
      setTimeout(() => {
        processBattleResults(humanCard, cpuCards);
      }, 2000);
    }
    
    // Mostra as cartas de batalha
    function showBattleCards(humanCard, cpuCards) {
      const battleArea = document.getElementById('battleArea');
      battleArea.innerHTML = '';
      
      // Carta do jogador humano
      const humanCardElement = createCardElement(humanCard, 0, false);
      battleArea.appendChild(humanCardElement);
      
      // Cartas dos CPUs
      cpuCards.forEach(cpuCard => {
        const cpuCardElement = createCardElement(cpuCard.card, 0, false);
        battleArea.appendChild(cpuCardElement);
      });
      
      // Toca o som da carta
      document.getElementById('cardSound').play();
    }
    
    // Processa os resultados da batalha
    function processBattleResults(humanCard, cpuCards) {
      // Verifica vantagens elementais
      let humanPower = humanCard.power;
      let humanAdvantage = false;
      
      // Processa cada CPU
      cpuCards.forEach(cpuCard => {
        const cpuPlayer = gameConfig.players[cpuCard.playerId];
        let cpuPower = cpuCard.card.power;
        let cpuAdvantage = false;
        
        // Verifica vantagem elemental do jogador humano
        if (elementAdvantages[humanCard.element].includes(cpuCard.card.element)) {
          humanPower += 1;
          humanAdvantage = true;
        }
        
        // Verifica vantagem elemental do CPU
        if (elementAdvantages[cpuCard.card.element].includes(humanCard.element)) {
          cpuPower += 1;
          cpuAdvantage = true;
        }
        
        // Mostra vantagens no log
        if (humanAdvantage) {
          updateGameLog(`⚔️ ${humanCard.name} tem vantagem sobre ${cpuCard.card.name}! +1 de força.`);
        }
        if (cpuAdvantage) {
          updateGameLog(`⚔️ ${cpuCard.card.name} tem vantagem sobre ${humanCard.name}! +1 de força.`);
        }
        
        if (humanPower > cpuPower) {
          // Jogador humano vence
          gameConfig.players[0].score++;
          updateGameLog(`🎉 ${gameConfig.players[0].name} venceu ${cpuPlayer.name} com ${humanCard.name} (${humanPower} vs ${cpuPower})`);
          
          // Aplica habilidade da carta vencedora
          applyCardAbility(humanCard, cpuCard.card, true);
          
          // Descarta a carta perdedora
          gameConfig.discardPile.push(cpuCard.card);
        } else if (humanPower < cpuPower) {
          // CPU vence
          cpuPlayer.score++;
          updateGameLog(`💀 ${cpuPlayer.name} venceu ${gameConfig.players[0].name} com ${cpuCard.card.name} (${cpuPower} vs ${humanPower})`);
          
          // Aplica habilidade da carta vencedora
          applyCardAbility(cpuCard.card, humanCard, true);
          
          // Descarta a carta perdedora
          gameConfig.discardPile.push(humanCard);
        } else {
          // Empate
          updateGameLog(`⚖️ Empate entre ${gameConfig.players[0].name} e ${cpuPlayer.name} (${humanPower} vs ${cpuPower})`);
          
          // Descarta ambas as cartas
          gameConfig.discardPile.push(humanCard, cpuCard.card);
        }
        
        gameConfig.cardsPlayed++;
      });
      
      // Verifica se alguém ganhou
      checkGameEnd();
      
      // Todos os jogadores compram uma nova carta
      drawNewCards();
      
      // Atualiza a interface
      updatePlayerInfo();
      renderPlayerHand();
      
      // Prepara para o próximo turno
      gameConfig.gameState = 'waiting';
    }
    
    // Aplica habilidades especiais das cartas
    function applyCardAbility(winnerCard, loserCard, isWinner) {
      // Implementação simplificada das habilidades
      updateGameLog(`✨ Habilidade de ${winnerCard.name} ativada: ${winnerCard.ability}`);
      
      // Exemplos de implementação de algumas habilidades
      if (winnerCard.id === 4 && isWinner) { // Conjurador do Trovão
        updateGameLog(`⚡ ${winnerCard.name} causa 1 ponto de dano direto!`);
        // Implemente a lógica para adicionar 1 ponto
      }
      
      if (winnerCard.id === 5 && isWinner) { // Guardião da Floresta
        if (gameConfig.discardPile.length > 0) {
          const recoveredCard = gameConfig.discardPile.pop();
          updateGameLog(`🌿 ${winnerCard.name} recupera ${recoveredCard.name} do descarte!`);
          // Implemente a lógica para adicionar a carta de volta ao deck
        }
      }
      
      // Adicione outras habilidades conforme necessário
    }
    
    // Verifica se o jogo terminou
    function checkGameEnd() {
      const winner = gameConfig.players.find(player => player.score >= gameConfig.maxPoints);
      
      if (winner) {
        endGame(winner);
      }
    }
    
    // Finaliza o jogo
    function endGame(winner) {
      gameConfig.gameState = 'ended';
      
      document.getElementById('gameScreen').style.display = 'none';
      document.getElementById('gameOverScreen').style.display = 'flex';
      
      document.getElementById('winnerName').textContent = winner.name;
      document.getElementById('playerFinalScore').textContent = gameConfig.players[0].score;
      document.getElementById('roundsPlayed').textContent = gameConfig.round;
      document.getElementById('cardsPlayed').textContent = gameConfig.cardsPlayed;
      
      // Toca som de vitória ou derrota
      if (winner.id === 0) {
        document.getElementById('winSound').play();
      } else {
        document.getElementById('loseSound').play();
      }
    }
    
    // Compra novas cartas
    function drawNewCards() {
      gameConfig.players.forEach(player => {
        if (player.active && gameConfig.deck.length > 0) {
          const newCard = gameConfig.deck.pop();
          player.hand.push(newCard);
          updateGameLog(`🃏 ${player.name} comprou uma nova carta: ${newCard.name}`);
        }
      });
      
      // Verifica se o deck acabou
      if (gameConfig.deck.length === 0) {
        updateGameLog("⚠️ O monte de cartas acabou! Fim de jogo.");
        endGameWithHighestScore();
      }
    }
    
    // Finaliza o jogo quando o deck acaba
    function endGameWithHighestScore() {
      let highestScore = 0;
      let winners = [];
      
      gameConfig.players.forEach(player => {
        if (player.score > highestScore) {
          highestScore = player.score;
          winners = [player];
        } else if (player.score === highestScore) {
          winners.push(player);
        }
      });
      
      if (winners.length === 1) {
        endGame(winners[0]);
      } else {
        // Empate - jogo termina sem vencedor
        gameConfig.gameState = 'ended';
        document.getElementById('gameScreen').style.display = 'none';
        document.getElementById('gameOverScreen').style.display = 'flex';
        
        document.getElementById('winnerName').textContent = "Empate!";
        document.getElementById('playerFinalScore').textContent = gameConfig.players[0].score;
        document.getElementById('roundsPlayed').textContent = gameConfig.round;
        document.getElementById('cardsPlayed').textContent = gameConfig.cardsPlayed;
      }
    }
    
    // Atualiza o log do jogo
    function updateGameLog(message) {
      gameConfig.gameLog.push(message);
      
      const gameLogElement = document.getElementById('gameLog');
      gameLogElement.innerHTML = '';
      
      gameConfig.gameLog.forEach(log => {
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        logEntry.textContent = log;
        gameLogElement.appendChild(logEntry);
      });
      
      // Rolagem automática para o final
      gameLogElement.scrollTop = gameLogElement.scrollHeight;
    }
    
    // Inicializa o construtor de deck
    function initDeckBuilder() {
      const availableCards = document.getElementById('availableCards');
      const playerDeck = document.getElementById('playerDeck');
      
      availableCards.innerHTML = '';
      playerDeck.innerHTML = '';
      
      // Filtra cartas disponíveis (não estão no deck)
      const availableCardsList = allCards.filter(card => 
        !gameConfig.playerDeck.some(deckCard => deckCard.id === card.id)
      );
      
      // Mostra cartas disponíveis
      availableCardsList.forEach(card => {
        const cardElement = createDeckBuilderCard(card, 'available');
        availableCards.appendChild(cardElement);
      });
      
      // Mostra cartas no deck do jogador
      gameConfig.playerDeck.forEach(card => {
        const cardElement = createDeckBuilderCard(card, 'deck');
        playerDeck.appendChild(cardElement);
      });
      
      updateDeckCounts();
    }
    
    // Cria uma carta para o construtor de deck
    function createDeckBuilderCard(card, location) {
      const cardElement = document.createElement('div');
      cardElement.className = `card ${card.element}`;
      cardElement.dataset.id = card.id;
      
      const cardImage = document.createElement('div');
      cardImage.className = 'card-image';
      cardImage.textContent = card.icon;
      
      const cardName = document.createElement('div');
      cardName.className = 'card-name';
      cardName.textContent = card.name;
      
      const cardType = document.createElement('div');
      cardType.className = 'card-type';
      cardType.textContent = typeNames[card.type];
      
      const cardElementText = document.createElement('div');
      cardElementText.className = 'card-element';
      cardElementText.textContent = elementNames[card.element];
      cardElementText.style.color = elementColors[card.element];
      
      const cardPower = document.createElement('div');
      cardPower.className = 'card-power';
      cardPower.textContent = `Força: ${card.power}`;
      
      const cardAbility = document.createElement('div');
      cardAbility.className = 'card-ability';
      cardAbility.textContent = card.ability;
      
      cardElement.appendChild(cardImage);
      cardElement.appendChild(cardName);
      cardElement.appendChild(cardType);
      cardElement.appendChild(cardElementText);
      cardElement.appendChild(cardPower);
      cardElement.appendChild(cardAbility);
      
      cardElement.addEventListener('click', () => toggleCardInDeck(card, location));
      
      return cardElement;
    }
    
    // Adiciona/remove uma carta do deck
    function toggleCardInDeck(card, location) {
      if (location === 'available') {
        // Adiciona ao deck se não estiver cheio
        if (gameConfig.playerDeck.length < 18) {
          gameConfig.playerDeck.push(card);
          document.getElementById('cardSound').play();
        } else {
          alert("O deck está cheio (máximo de 18 cartas). Remova algumas cartas antes de adicionar novas.");
        }
      } else {
        // Remove do deck
        const index = gameConfig.playerDeck.findIndex(c => c.id === card.id);
        if (index !== -1) {
          gameConfig.playerDeck.splice(index, 1);
          document.getElementById('cardSound').play();
        }
      }
      
      initDeckBuilder(); // Recarrega o construtor de deck
    }
    
    // Atualiza as contagens de cartas
    function updateDeckCounts() {
      document.getElementById('availableCount').textContent = allCards.length - gameConfig.playerDeck.length;
      document.getElementById('deckCount').textContent = gameConfig.playerDeck.length;
    }
    
    // Salva o deck
    function saveDeck() {
      if (gameConfig.playerDeck.length < 18) {
        alert("Seu deck precisa ter exatamente 18 cartas. Adicione mais cartas.");
        return;
      }
      
      localStorage.setItem('elementalClashDeck', JSON.stringify(gameConfig.playerDeck));
      alert("Deck salvo com sucesso!");
      document.getElementById('winSound').play();
      backToMenu();
    }
    
    // Efeito de partículas
    function createParticles() {
      const particlesContainer = document.getElementById('particles');
      const particleCount = window.innerWidth < 768 ? 30 : 50;
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // Tamanho aleatório entre 2px e 6px
        const size = Math.random() * 4 + 2;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        
        // Posição aleatória
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.top = `${Math.random() * 100}%`;
        
        // Opacidade aleatória
        particle.style.opacity = Math.random() * 0.5 + 0.1;
        
        // Animação
        const duration = Math.random() * 20 + 10;
        const delay = Math.random() * 5;
        particle.style.animation = `float ${duration}s linear ${delay}s infinite`;
        
        particlesContainer.appendChild(particle);
      }
    }
    
    // Efeito de digitação para o subtítulo
    function typeWriter() {
      const subtitle = document.querySelector('.game-subtitle');
      const text = "Domine os elementos e torne-se o maior duelista mágico!";
      let i = 0;
      
      function type() {
        if (i < text.length) {
          subtitle.textContent += text.charAt(i);
          i++;
          setTimeout(type, 50);
        }
      }
      
      // Limpa o texto inicial e começa a animação
      subtitle.textContent = '';
      setTimeout(type, 1000);
    }
    
    // Inicializa o jogo quando a página carrega
    window.onload = function() {
      createParticles();
      typeWriter();
      initGame();
    };
  </script>
</body>
</html>
